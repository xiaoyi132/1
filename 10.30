//#include<stdio.h>
//int main()
//{
//	int x, y;
//	for (x = 0, y = 0; x < 2 && y < 5; ++x, y++)
//	{
//		printf("hehe\n");
//	}
//	return 0;
//}

//n的阶乘
//#include<stdio.h>
//int main()
//{
//	int n = 0, i = 1;
//	int b = 1;
//	scanf_s("%d", &n);
//	/*for (int a = 1; a <= n; a++)
//	{
//		b *= a;
//	}*/
//	while (i < n)
//	{
//		i++;
//		b = b * i;
//	}
//	printf("%d", b);
//	return 0;
//}


//1! + 2! + 3! + 4! +....+ 10!的值
////#include<stdio.h>
////int main()
////{
////	int n = 0, s = 1;
////	int i = 1;
////	for (; i <= 10; i++)
////	{
////		/*for (int a = 1, c = 1; c <= i; c++)
////		{
////			a = (a * c);
////			s = a;
////		}*/  //两层嵌套
////		//一层for循环
////		s = s * i;
////		n = n + s;
////	}
////	printf("%d", n);
////	return 0;
////}


//演示多个字符从两端移动,向中间汇集
//#include<stdio.h>
//int main()
//{
//	int n = 0;
//	for (int l = 0; l < 4; l++)
//	{
//		for (int n = 0; n <= l; n++)
//		{
//			printf(" ");
//		}
//		printf("X");
//		for (n = 5 - 2 * l; n > 0; n--)
//		{
//			printf(" ");
//		}
//		for (int i = l; i <= l; i++)
//		{
//			if (n < 0)
//				break;
//			printf("X");
//		}
//		printf("\n");
//	}
//	return 0;	
//	}


//模拟登录情景(只能输入三次)
//#include<stdio.h>
//int main()
//{
//	char code[10] = { 0 };
//	
//	for(int i = 0; i < 10; i++)
//		{
//			scanf_s("%c", &code[i]);
//		}
//	char input[10] = { 0 };
//	for (int i = 0; i < 10; i++)
//	{
//		scanf_s("%c", &input[i]);
//	}
//	if (input == code)
//		printf("密码正确");
//	else
//	{
//		for (int i = 0; i < 3; i++)
//		{
//			printf("密码错误,请重新输入");
//			for (int i = 0; i < 10; i++)
//			{
//				scanf_s("%c", &input[i]);
//			}
//					if (input == code)
//					{
//						printf("密码正确");
//						break;
//					}
//					if (i = 2)
//						printf("输入超过3次,停止输入");
//		}
//	}
//	return 0;
//}


//查找某个数组的具体值
#include<stdio.h>
int main()
{
	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
	int s = 0;
	int L = 0, R = (sizeof(arr)/sizeof(arr[0]) - 1);
	scanf_s("%d", &s);
	int M = (L + R) / 2;
	for (int i = 0; i <= 10; i++)
	{
		if (s > arr[M])
		{
			L = M + 1;
			M = (L + R) / 2;
			continue;
		}
		else if (s < arr[M])
		{
			R = M - 1;
			M = (L + R) / 2;
			continue;
		}
		else if(s == arr[M])
		{
			printf("%d", M);
			break;
		}
	}
	return 0;
}
